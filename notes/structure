3 different docker containers that contain these 3 components
1. nestjs - backend
2. react - frontend
3. postgres - database

.env in the directory nestjs contains information about our secrets
The database secrets are not that important, especially the FT_OAUTH_CLIENT_ID and FT_OAUTH_CLIENT_SECRET are important, as they can be used by everyone to change the app.

We are using git-crypt to encrypt the .env file and to decrypt the .env file
To decrypt:
- the key is needed from github (Daniels github, see `key` file in Slack), will expire after some time (a month)
- command: git-crypt unlock <keyname>

1. nestjs - backend
File structure:
`dist` - contains the .ts typescript files compiled to .js javascript files, they are automatically generated
`node_modules` - contains all the packages we need for the backend. Whenever we npm install, it will install the package in the local node_modules directory and will add the package to the package.json and package-lock.json files. ^9.0.1. means that a package will be of version 9 something at least. The packages versions in the package-lock.json file can lock a version to a lower version, for when there are dependency issues. https://docs.npmjs.com/cli/v8/commands/npm-install
`src` - this is where the magic happens. Here we store all the typescript files. The files in the root of this directory are also the 'root' module, the 'root' controller etc. The main.ts file starts up our application, by listening to port 5000. enableCors is what we think we need: https://en.wikipedia.org/wiki/Cross-origin_resource_sharing.
The app.module.ts file is like a main. It imports our different modules into the application. For example, the channels module and the authentication module. The different modules all have their own controller, which controll the requests and responses to the client. https://docs.nestjs.com/controllers
Which controllers recieve which requests? The controller automatically comes forward when there is a request to its specific endpoint. @Controller('channels') -> controller controlls the endpoint 'channels'.
The x.service.ts files contain functions (usually)
The x.controller.ts files contain the decorators for different requests
The x.module.ts files specify the stuff used by the module and import the necessary dependencies
`test` - not used anymore
`test_homepage` - to test the backend, this directory holds the an index file to which you can add different tests. This is specified in the app.module.ts file as rootPath.

2. react - frontend
We can use Bootstrap to very easily make a good looking website (Rutger)

3. postgres - database
There is not a lot of code around the database, only the dockerfiles that set up the database.
